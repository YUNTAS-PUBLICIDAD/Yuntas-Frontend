---
// Imports
import ProductCard from "../components/products/ProductCard.jsx";
import Layout from "../layouts/Layout.astro";
import { Picture } from "astro:assets";
import imagenPrincipio from "../assets/images/products/principio.webp";
import { config, getApiUrl } from "../../config";
import type Producto from "../models/Product.ts";

const API_URL = import.meta.env.PUBLIC_API_URL;
let productsApi: Producto[] = [];

// Cargar productos
try {
  const response = await fetch(getApiUrl(config.endpoints.productos.list), {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      Accept: "application/json"
    }
  });

  if (!response.ok) throw new Error("Error al obtener productos de la API");

  const jsonResponse = await response.json();

  console.log("Respuesta completa de la API:", jsonResponse);
  console.log("Contenido de jsonResponse.data:", jsonResponse.data);

  if (Array.isArray(jsonResponse.data)) {
    productsApi = jsonResponse.data.map((producto: any): Producto => ({
      id: producto.id,
      title: producto.titulo || "",
      subtitle: producto.subtitulo || "",
      tagline: producto.lema || "",
      description: producto.descripcion || "",
      specs: producto.especificaciones || {},
      dimensions: producto.dimensiones || {},
      relatedProducts: producto.productos_relacionados || [],
      images: producto.imagenes?.map((img: any) => `${API_URL}${img.url_imagen}`) || [],
      image: producto.imagenes?.[0] ? `${API_URL}${producto.imagenes[0].url_imagen}` : "",
      nombreProducto: producto.nombre || "",
      seccion: producto.seccion || "",
      alt: producto.imagenes?.[0] ? producto.imagenes[0].texto_alt_SEO : "Imagen no disponible",
    }));
  }
} catch (err) {
  console.error("Error al obtener productos:", err);
}

// Agrupar productos
const groupedMobile: Producto[][] = [];
for (let i = 0; i < productsApi.length; i += 2) {
  groupedMobile.push(productsApi.slice(i, i + 2));
}

const groupedDesktop: Producto[][] = [];
for (let i = 0; i < productsApi.length; i += 3) {
  groupedDesktop.push(productsApi.slice(i, i + 3));
}
---
<Layout title="Productos">
  <!-- Banner -->
  <section class="relative w-full">
    <Picture src={imagenPrincipio} alt="Banner de Productos" />
  </section>

  <!-- Título principal -->
  <div class="bg-gray h-30 flex items-center justify-center">
    <h2 class="text-xl sm:text-xl md:text-2xl lg:text-3xl xl:text-4xl Montserrat font-extrabold text-[#243360]">
      NUESTROS PRODUCTOS
    </h2>
  </div>

  <!-- Sección de productos -->
  <section class="w-full bg-gradient-to-b from-blue-900 to-indigo-950 py-20">
    <div class="max-w-[1200px] px-4 sm:px-8 md:px-12 lg:px-16 xl:px-24 mx-auto">
      <!-- Subtítulo -->
      <div class="flex items-center justify-center mb-10">
        <p class="text-xl sm:text-2xl md:text-2xl lg:text-3xl xl:text-4xl Montserrat font-medium text-white/75 text-center">
          Descubre la selección que tenemos para ti
        </p>
      </div>

      <!-- Vista móvil (2 columnas) -->
      <div class="md:hidden">
        {groupedMobile.length > 0 ? (
            groupedMobile.map((row, rowIndex) => (
                <div>
                  {rowIndex > 0 && <div class="w-full h-[2px] bg-[#76b3c2] my-5"></div>}
                  <div class="grid grid-cols-2 gap-4">
                    {row.map((producto) => (
                        <div class="flex justify-center">
                          <div class="w-full max-w-[250px]">
                            <ProductCard client:load producto={producto} />
                          </div>
                        </div>
                    ))}
                  </div>
                </div>
            ))
        ) : (
            <p class="text-white text-center">No hay productos disponibles</p>
        )}
      </div>

      <!-- Vista escritorio (3 columnas) -->
      <div class="hidden md:block">
        {groupedDesktop.length > 0 ? (
            groupedDesktop.map((row, rowIndex) => (
                <div>
                  {rowIndex > 0 && <div class="w-full h-[2px] bg-[#76b3c2] my-8"></div>}
                  <div class="grid grid-cols-3 gap-8 lg:gap-12">
                    {row.map((producto) => (
                        <div class="flex justify-center">
                          <div class="w-full max-w-[250px]">
                            <ProductCard client:load producto={producto} />
                          </div>
                        </div>
                    ))}
                  </div>
                </div>
            ))
        ) : (
            <p class="text-white text-center">No hay productos disponibles</p>
        )}
      </div>
    </div>
  </section>
</Layout>